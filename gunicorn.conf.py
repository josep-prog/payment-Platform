import os\nfrom multiprocessing import cpu_count\n\n# Server socket\nbind = f\"0.0.0.0:{os.getenv('PORT', 5000)}\"\nbacklog = 2048\n\n# Worker processes\nworkers = min(cpu_count() * 2 + 1, 4)  # Limit workers for free tier\nworker_class = \"sync\"\nworker_connections = 1000\ntimeout = 120\nkeepalive = 2\nmax_requests = 1000\nmax_requests_jitter = 50\n\n# Logging\naccesslog = \"-\"\nerrorlog = \"-\"\nloglevel = os.getenv('LOG_LEVEL', 'info').lower()\naccess_log_format = '%(h)s %(l)s %(u)s %(t)s \"%(r)s\" %(s)s %(b)s \"%(f)s\" \"%(a)s\" %(D)s'\n\n# Process naming\nproc_name = 'momo_payment_verification'\n\n# Server mechanics\npreload_app = True\nmax_worker_memory = 256 * 1024 * 1024  # 256MB per worker\n\n# Security\nlimit_request_line = 4096\nlimit_request_fields = 100\nlimit_request_field_size = 8190\n\n# Performance tuning\nworker_tmp_dir = '/dev/shm'  # Use memory for temp files\n\ndef when_ready(server):\n    \"\"\"Called just after the server is started.\"\"\"\n    server.log.info(\"MoMo Payment Verification System started\")\n\ndef worker_int(worker):\n    \"\"\"Called just after a worker exited on SIGINT or SIGQUIT.\"\"\"\n    worker.log.info(\"Worker received INT or QUIT signal\")\n\ndef pre_fork(server, worker):\n    \"\"\"Called just before a worker is forked.\"\"\"\n    server.log.info(f\"Worker spawned (pid: {worker.pid})\")\n\ndef post_fork(server, worker):\n    \"\"\"Called just after a worker has been forked.\"\"\"\n    server.log.info(f\"Worker spawned (pid: {worker.pid})\")\n\ndef worker_abort(worker):\n    \"\"\"Called when a worker received the SIGABRT signal.\"\"\"\n    worker.log.info(f\"Worker (pid: {worker.pid}) received SIGABRT signal\")
